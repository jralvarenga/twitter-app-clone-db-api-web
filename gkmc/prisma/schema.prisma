// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Actual review of a song/album that the user do
model Review {
  id             Int       @id @default(autoincrement())
  userId         String
  Thought        Thought   @relation(fields: [thoughtId], references: [id])
  rate           Float // Number between 1-10
  reviewOf       Music     @relation(fields: [musicId], references: [id])
  songAttachment String?
  Ranking        Ranking?  @relation(fields: [rankingId], references: [id])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime?
  musicId        Int
  rankingId      Int?
  thoughtId      Int
}

// the reaction that the user has to that review, thhought, etc. is a like or a nolike
model Reaction {
  id        Int       @id @default(autoincrement())
  userId    String
  like      Boolean
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  Thought   Thought?  @relation(fields: [thoughtId], references: [id])
  thoughtId Int?
}

// Thhought that a user has, can be a thhought about a review or a quoted to another thhought or even a small review or recomendation
model Thought {
  id               Int                @id @default(autoincrement())
  userId           String
  content          String
  reactions        Reaction[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime?
  reviewId         Int?
  comments         Comment[]
  Quote            Quote[]
  Review           Review[]
  CommentOfThought CommentOfThought[]
  QuoteOfThought   QuoteOfThought[]
}

model QuoteOfThought {
  id        Int     @id @default(autoincrement())
  Thought   Thought @relation(fields: [thoughtId], references: [id])
  thoughtId Int
  Quote     Quote[]
}

// Quoted thhought, review or comment that the user wants to add more info
model Quote {
  id               Int            @id @default(autoincrement())
  Thought          Thought        @relation(fields: [thoughtId], references: [id])
  thoughtId        Int
  QuoteOfThought   QuoteOfThought @relation(fields: [quoteOfThoughtId], references: [id])
  quoteOfThoughtId Int
}

model CommentOfThought {
  id        Int       @id @default(autoincrement())
  Thought   Thought   @relation(fields: [thoughtId], references: [id])
  thoughtId Int
  Comment   Comment[]
}

// Comment that the user has about a review or thhought, is in a form of thought, can also be a reply
model Comment {
  id                 Int              @id @default(autoincrement())
  Thought            Thought          @relation(fields: [thoughtId], references: [id])
  CommentOfThought   CommentOfThought @relation(fields: [commentOfThoughtId], references: [id])
  thoughtId          Int
  commentOfThoughtId Int
}

// List of all music reviewd on crooked, data is fetched by a music service like spotify or apple music
model Music {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  artist     String    @unique
  attachment String    @unique
  type       String
  createdAt  DateTime  @default(now())
  Review     Review[]
  Ranking    Ranking[]
}

model Ranking {
  id        Int       @id @default(autoincrement())
  rankingOf Music     @relation(fields: [musicId], references: [id])
  position  Int
  song      String
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  musicId   Int
  Review    Review[]
}

model Follower {
  id        Int      @id @default(autoincrement())
  userId    String
  follows   String
  createdAt DateTime @default(now())
}
